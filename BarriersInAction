package com.sam.vag;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/*
* @author Sandip Vaghasiya
* 11/16/2018 14:02
*/
public class BarriersInAction
	{
		public static void main(String[] args)
			{
				class Friend implements Callable<String>
					{

						private CyclicBarrier barrier;

						public Friend(CyclicBarrier barrier)
							{
								this.barrier = barrier;
							}

						@Override
						public String call() throws Exception
							{
								Random random = new Random();
								Thread.sleep(random.nextInt(20) * 100 + 100);
								System.out.println("I just arrived, waiting for the others...");
								barrier.await();
								System.out.println("Let's go the cinema!");
								return "ok";
							}

					}
				ExecutorService executorService = Executors.newFixedThreadPool(4);

				CyclicBarrier barrier = new CyclicBarrier(4, () -> System.out.println("Barrier operning "));
				List<Future<String>> futures = new ArrayList<>();

				try {
					for (int i = 0; i < 4; i++) {
						Friend friend = new Friend(barrier);
						futures.add(executorService.submit(friend));
					}
					futures.forEach(

							future -> {
								try {
									future.get();
								} catch (InterruptedException | ExecutionException e) {
									System.out.println(e.getMessage());
								}
							}

					);

				} finally {
					executorService.shutdown();
				}

			}
	}
